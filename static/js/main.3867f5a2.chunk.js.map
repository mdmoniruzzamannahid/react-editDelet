{"version":3,"sources":["components/Books/Book/Book.js","components/Books/Books.js","components/App.js","serviceWorker.js","index.js"],"names":["Book","state","isEditable","changeKeyHandeler","event","key","setState","output","this","className","onKeyPress","onChange","e","props","changeHandler","target","value","book","id","type","name","marks","onClick","deletHandeler","Component","Books","books","map","App","newBooks","filter","bind","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAqDeA,G,wNAhDfC,MAAM,CACFC,YAAa,G,EAEjBC,kBAAoB,SAACC,GACA,UAAdA,EAAMC,KACL,EAAKC,SAAS,CACVJ,YAAW,K,uDAKT,IAAD,OACDK,EAASC,KAAKP,MAAMC,WACxB,2BACIO,UAAU,WACVC,WAAYF,KAAKL,kBACjBQ,SAAU,SAACC,GAAD,OAAK,EAAKC,MAAMC,cAAcF,EAAEG,OAAOC,MAAM,EAAKH,MAAMI,KAAKC,KACvEC,KAAK,OACLH,MAAOR,KAAKK,MAAMI,KAAKG,OAEnB,2BAAIZ,KAAKK,MAAMI,KAAKG,MAC5B,OAEQ,wBAAIX,UAAU,0BACV,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACVF,GAEL,yBAAKE,UAAU,YACX,0BAAMA,UAAU,WAAYD,KAAKK,MAAMI,KAAKI,QAGhD,yBAAKZ,UAAU,YACX,0BAAMa,QAAS,kBAAI,EAAKhB,SAAS,CAACJ,YAAW,MAAQ,uBAAGO,UAAU,0BAEtE,yBAAKA,UAAU,YACX,0BAAMa,QAAS,kBAAI,EAAKT,MAAMU,cAAc,EAAKV,MAAMI,KAAKC,MAAK,uBAAGT,UAAU,sC,GAtCvFe,cCmBJC,E,uKAlBD,IAAD,OACL,OACI,yBAAKhB,UAAU,aACX,wBAAIA,UAAU,QAAd,gCAEID,KAAKK,MAAMa,MAAMC,KAAI,SAACV,GAClB,OACI,kBAAC,EAAD,CACIH,cAAe,EAAKD,MAAMC,cAC1BS,cAAe,EAAKV,MAAMU,cAC1BN,KAAMA,Y,GAXlBO,aC4ELI,E,4MAxEb3B,MAAM,CACJyB,MAAM,CACJ,CACEN,KAAK,OACLC,MAAM,GACNH,GAAG,GAEL,CACEE,KAAK,UACLC,MAAM,GACNH,GAAG,GAEL,CACEE,KAAK,UACLC,MAAM,GACNH,GAAG,GAEL,CACEE,KAAK,YACLC,MAAM,GACNH,GAAG,GAEL,CACEE,KAAK,UACLC,MAAM,GACNH,GAAG,GAEL,CACEE,KAAK,SACLC,MAAM,GACNH,GAAG,K,EAKTK,cAAc,SAACL,GACX,IAAIW,EAAW,EAAK5B,MAAMyB,MAAMI,QAAO,SAAAb,GAAI,OAAIA,EAAKC,KAAOA,KAE3D,EAAKZ,SAAS,CACZoB,MAAOG,K,EAIbf,cAAgB,SAACM,EAAKF,GACpB,IAAIW,EAAW,EAAK5B,MAAMyB,MAAMC,KAAI,SAAAV,GAClC,OAAGC,IAAOD,EAAKC,GACb,2BACKD,GADL,IAEEG,SAIGH,KAET,EAAKX,SAAS,CACZoB,MAAMG,K,uDAKR,OACE,yBAAKpB,UAAU,OACX,kBAAC,EAAD,CACIK,cAAeN,KAAKM,cAAciB,KAAKvB,MACvCe,cAAef,KAAKe,cAAcQ,KAAKvB,MACvCkB,MAASlB,KAAKP,MAAMyB,a,GAnEhBF,aCOEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3867f5a2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Book.css'\r\n\r\nclass Book extends Component {\r\n\r\nstate={\r\n    isEditable : false\r\n}\r\nchangeKeyHandeler = (event) => {\r\n    if(event.key === 'Enter'){\r\n        this.setState({\r\n            isEditable:false\r\n        })\r\n    }\r\n    \r\n}\r\n    render() {\r\n        let output = this.state.isEditable ? (\r\n        <input\r\n            className=\"inputBox\"\r\n            onKeyPress={this.changeKeyHandeler}\r\n            onChange={(e)=>this.props.changeHandler(e.target.value,this.props.book.id)} \r\n            type=\"text\" \r\n            value={this.props.book.name}\r\n           /> \r\n           ) : (<p>{this.props.book.name}</p>)\r\n        return (\r\n           \r\n                <li className=\"list-group-item d-flex\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-8\">\r\n                            {output}\r\n                        </div>\r\n                        <div className=\"col-sm-1\">\r\n                            <span className=\"ml-auto\">{ this.props.book.marks }</span>\r\n                        </div>\r\n                       \r\n                        <div className=\"col-sm-1\">\r\n                            <span onClick={()=>this.setState({isEditable:true})}><i className=\"far fa-edit editBtn\"></i></span> \r\n                        </div>\r\n                        <div className=\"col-sm-1\">\r\n                            <span onClick={()=>this.props.deletHandeler(this.props.book.id)}><i className=\"far fa-trash-alt deletBtn\"></i></span>\r\n                        </div>\r\n                            \r\n                        \r\n                    </div>\r\n                       \r\n                </li>\r\n            \r\n\r\n        )\r\n    }\r\n}\r\nexport default Book\r\n","import React, { Component } from 'react'\r\nimport Book from './Book/Book'\r\n\r\nclass Books extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h2 className=\"mb-2\">React Edit & delet formula :</h2>\r\n                {\r\n                    this.props.books.map((book) =>{\r\n                        return(\r\n                            <Book \r\n                                changeHandler={this.props.changeHandler}\r\n                                deletHandeler={this.props.deletHandeler} \r\n                                book={book}/>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Books\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Books from './Books/Books'\n\n\nclass App extends Component {\n\n  state={\n    books:[\n      {\n        name:'Math',\n        marks:80,\n        id:1\n      },\n      {\n        name:'English',\n        marks:70,\n        id:2\n      },\n      {\n        name:'Physics',\n        marks:78,\n        id:3\n      },\n      {\n        name:'Chemistry',\n        marks:75,\n        id:4\n      },\n      {\n        name:'Biology',\n        marks:77,\n        id:5\n      },\n      {\n        name:'Bangla',\n        marks:82,\n        id:6\n      },\n    ]\n  }\n\n  deletHandeler=(id)=>{\n      let newBooks = this.state.books.filter(book => book.id !== id)\n\n      this.setState({\n        books: newBooks\n      })\n  }\n \n  changeHandler = (name,id) =>{\n    let newBooks = this.state.books.map(book=>{\n      if(id === book.id){\n        return{\n          ...book,\n          name\n        }\n\n      }\n      return book\n    })\n    this.setState({\n      books:newBooks\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n          <Books \n              changeHandler={this.changeHandler.bind(this)}\n              deletHandeler={this.deletHandeler.bind(this)} \n              books = {this.state.books}\n          />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}